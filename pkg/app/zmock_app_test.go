// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app_test

import (
	"context"
	"github.com/lucianogarciaz/pulley-example/pkg/domain"
	"sync"
)

// Ensure, that UserRepositoryMock does implement domain.UserRepository.
// If this is not the case, regenerate this file with moq.
var _ domain.UserRepository = &UserRepositoryMock{}

// UserRepositoryMock is a mock implementation of domain.UserRepository.
//
//	func TestSomethingThatUsesUserRepository(t *testing.T) {
//
//		// make and configure a mocked domain.UserRepository
//		mockedUserRepository := &UserRepositoryMock{
//			CreateUserFunc: func(ctx context.Context, user domain.User) error {
//				panic("mock out the CreateUser method")
//			},
//			UpdateFunc: func(user domain.User) error {
//				panic("mock out the Update method")
//			},
//		}
//
//		// use mockedUserRepository in code that requires domain.UserRepository
//		// and then make assertions.
//
//	}
type UserRepositoryMock struct {
	// CreateUserFunc mocks the CreateUser method.
	CreateUserFunc func(ctx context.Context, user domain.User) error

	// UpdateFunc mocks the Update method.
	UpdateFunc func(user domain.User) error

	// calls tracks calls to the methods.
	calls struct {
		// CreateUser holds details about calls to the CreateUser method.
		CreateUser []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// User is the user argument value.
			User domain.User
		}
		// Update holds details about calls to the Update method.
		Update []struct {
			// User is the user argument value.
			User domain.User
		}
	}
	lockCreateUser sync.RWMutex
	lockUpdate     sync.RWMutex
}

// CreateUser calls CreateUserFunc.
func (mock *UserRepositoryMock) CreateUser(ctx context.Context, user domain.User) error {
	if mock.CreateUserFunc == nil {
		panic("UserRepositoryMock.CreateUserFunc: method is nil but UserRepository.CreateUser was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		User domain.User
	}{
		Ctx:  ctx,
		User: user,
	}
	mock.lockCreateUser.Lock()
	mock.calls.CreateUser = append(mock.calls.CreateUser, callInfo)
	mock.lockCreateUser.Unlock()
	return mock.CreateUserFunc(ctx, user)
}

// CreateUserCalls gets all the calls that were made to CreateUser.
// Check the length with:
//
//	len(mockedUserRepository.CreateUserCalls())
func (mock *UserRepositoryMock) CreateUserCalls() []struct {
	Ctx  context.Context
	User domain.User
} {
	var calls []struct {
		Ctx  context.Context
		User domain.User
	}
	mock.lockCreateUser.RLock()
	calls = mock.calls.CreateUser
	mock.lockCreateUser.RUnlock()
	return calls
}

// Update calls UpdateFunc.
func (mock *UserRepositoryMock) Update(user domain.User) error {
	if mock.UpdateFunc == nil {
		panic("UserRepositoryMock.UpdateFunc: method is nil but UserRepository.Update was just called")
	}
	callInfo := struct {
		User domain.User
	}{
		User: user,
	}
	mock.lockUpdate.Lock()
	mock.calls.Update = append(mock.calls.Update, callInfo)
	mock.lockUpdate.Unlock()
	return mock.UpdateFunc(user)
}

// UpdateCalls gets all the calls that were made to Update.
// Check the length with:
//
//	len(mockedUserRepository.UpdateCalls())
func (mock *UserRepositoryMock) UpdateCalls() []struct {
	User domain.User
} {
	var calls []struct {
		User domain.User
	}
	mock.lockUpdate.RLock()
	calls = mock.calls.Update
	mock.lockUpdate.RUnlock()
	return calls
}
